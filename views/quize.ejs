<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz</title>
    <link rel="stylesheet" href="/css/quize-styles.css">  
</head>
<body>
    <%- include('./partials/header') %>
    <div class="timer" id="timer">Time: 00:00</div>
    
    <div class="quiz-container">
        <div class="quiz-header">
            <h1>Quiz</h1>
            <p>Navigate through questions using the controls below</p>
            
            <!-- Progress Bar -->
            <div class="progress-container">
                <div class="progress-bar" id="progressBar">0%</div>
            </div>
            
            <!-- Question Navigator Dots -->
            <div class="question-navigator">
                <div class="nav-dots" id="navDots"></div>
            </div>
        </div>

        <form id="quizForm" method="POST" action="/quiz/<%= req.params.module %>/<%= req.params.quizId %>/submit">
            <% if (quiz && quiz.length > 0) { %>
                <% quiz.forEach((question, index) => { %>
                    <div class="question-container <%= index === 0 ? 'active' : '' %>" data-question="<%= index %>">
                        <div class="question-number">
                            <span>Question <%= index + 1 %> of <%= quiz.length %></span>
                            <span>Quiz ID: <%= question.id || (index + 1) %></span>
                        </div>
                        <div class="question-text"><%= question.text %></div>
                        
                        <% question.options.forEach((option, optionIndex) => { %>
                            <div class="option">
                                <input type="radio" 
                                       id="q<%= index %>_<%= optionIndex %>" 
                                       name="answers[<%= index %>]" 
                                       value="<%= optionIndex %>">
                                <label for="q<%= index %>_<%= optionIndex %>"><%= option %></label>
                            </div>
                        <% }); %>
                    </div>
                <% }); %>
                
                <!-- Quiz Summary -->
                <div class="quiz-summary" id="quizSummary">
                    <h2>Quiz Summary</h2>
                    <p>Review your answers before submitting</p>
                    
                    <div class="summary-stats">
                        <div class="stat-item">
                            <div class="stat-number" id="totalQuestions"><%= quiz.length %></div>
                            <div>Total Questions</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="answeredCount">0</div>
                            <div>Answered</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="unansweredCount"><%= quiz.length %></div>
                            <div>Remaining</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="timeSpentDisplay">00:00</div>
                            <div>Time Spent</div>
                        </div>
                    </div>
                    
                    <button type="submit" class="submit-btn" id="submitBtn" disabled>Submit Quiz</button>
                    <br><br>
                    <button type="button" class="nav-btn" onclick="showQuestion(Math.max(0, currentQuestion))">Back to Questions</button>
                </div>
                
            <% } else { %>
                <div class="question-container active">
                    <div class="question-text">
                        <h2>No Questions Available</h2>
                        <p>This quiz does not contain any questions.</p>
                        <a href="/modules/<%= req.params.module %>" class="nav-btn">Back to Module</a>
                    </div>
                </div>
            <% } %>

            <!-- Navigation Controls -->
            <% if (quiz && quiz.length > 0) { %>
            <div class="navigation">
                <button type="button" class="nav-btn" id="prevBtn" onclick="previousQuestion()">Previous</button>
                <span id="questionInfo">Question 1 of <%= quiz.length %></span>
                <button type="button" class="nav-btn next" id="nextBtn" onclick="nextQuestion()">Next</button>
            </div>
            <% } %>

            <input type="hidden" name="timeSpent" id="timeSpent" value="0:00">
            <input type="hidden" name="answersArray" id="answersArray" value="">
        </form>
    </div>

    <!-- Custom Modal -->
    <div class="modal-overlay" id="confirmModal">
        <div class="modal">
            <div class="modal-header">
                <div class="modal-icon warning">!</div>
                <h3 class="modal-title">Confirm Submission</h3>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Content will be dynamically inserted here -->
            </div>
            <div class="modal-actions">
                <button class="modal-btn modal-btn-secondary" id="modalCancel">Cancel</button>
                <button class="modal-btn modal-btn-primary" id="modalConfirm">Submit Quiz</button>
            </div>
        </div>
    </div>

    <script>
        // Quiz state
        let currentQuestion = 0;
        const totalQuestions = <%= quiz ? quiz.length : 0 %>;
        let startTime = new Date();
        let timerInterval;
        
        // Initialize quiz only if we have questions
        document.addEventListener('DOMContentLoaded', function() {
            if (totalQuestions > 0) {
                initializeQuiz();
                startTimer();
                updateNavigation();
                updateProgress();
                updateSubmitButton();
                createNavigationDots();
                updateAnswersArray(); // Initialize hidden field
                
                // Initialize any pre-selected options
                document.querySelectorAll('.question-container').forEach(container => {
                    updateOptionSelection(container);
                });
            }
        });
        
        function initializeQuiz() {
            // Add click handlers for options
            document.querySelectorAll('.option').forEach(option => {
                option.addEventListener('click', function(e) {
                    // Prevent double-click issues
                    e.preventDefault();
                    
                    const radio = this.querySelector('input[type="radio"]');
                    if (radio) {
                        radio.checked = true;
                        updateOptionSelection(this.closest('.question-container'));
                        updateProgress();
                        updateSubmitButton();
                        updateNavigationDots();
                        updateAnswersArray(); // Update hidden field
                    }
                });
            });
            
            // Show first question
            showQuestion(0);
        }
        
        function showQuestion(questionIndex) {
            if (questionIndex < 0 || questionIndex >= totalQuestions) return;
            
            // Hide all questions and summary
            document.querySelectorAll('.question-container').forEach(q => q.classList.remove('active'));
            document.getElementById('quizSummary')?.classList.remove('active');
            
            // Show current question
            const questionElement = document.querySelector(`[data-question="${questionIndex}"]`);
            if (questionElement) {
                questionElement.classList.add('active');
                currentQuestion = questionIndex;
                updateNavigation();
                updateNavigationDots();
                
                // Don't scroll - maintain current scroll position
            }
        }
        
        function nextQuestion() {
            if (currentQuestion < totalQuestions - 1) {
                showQuestion(currentQuestion + 1);
            } else {
                showSummary();
            }
        }
        
        function previousQuestion() {
            if (currentQuestion > 0) {
                showQuestion(currentQuestion - 1);
            }
        }
        
        function showSummary() {
            document.querySelectorAll('.question-container').forEach(q => q.classList.remove('active'));
            const summaryElement = document.getElementById('quizSummary');
            if (summaryElement) {
                summaryElement.classList.add('active');
                updateSummaryStats();
                updateSubmitButton();
                updateAnswersArray(); // Update hidden field for summary
                currentQuestion = -1; // Special state for summary
                updateNavigation();
                updateNavigationDots();
                
                // Only scroll to top for summary view since it's a different content type
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        }
        
        function updateNavigation() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const questionInfo = document.getElementById('questionInfo');
            
            if (!prevBtn || !nextBtn || !questionInfo) return;
            
            if (currentQuestion === -1) {
                // Summary view
                prevBtn.textContent = 'Back to Questions';
                nextBtn.style.display = 'none';
                questionInfo.textContent = 'Quiz Summary';
                prevBtn.onclick = () => showQuestion(totalQuestions - 1);
                prevBtn.disabled = false;
            } else {
                prevBtn.textContent = 'Previous';
                prevBtn.onclick = previousQuestion;
                nextBtn.style.display = 'block';
                nextBtn.onclick = nextQuestion;
                
                prevBtn.disabled = currentQuestion === 0;
                
                if (currentQuestion === totalQuestions - 1) {
                    nextBtn.textContent = 'Review & Submit';
                    nextBtn.className = 'nav-btn submit';
                } else {
                    nextBtn.textContent = 'Next';
                    nextBtn.className = 'nav-btn next';
                }
                
                questionInfo.textContent = `Question ${currentQuestion + 1} of ${totalQuestions}`;
            }
        }
        
        function updateProgress() {
            const answeredQuestions = getAnsweredQuestions();
            const answeredCount = answeredQuestions.filter(answer => answer !== -1).length;
            const percentage = totalQuestions > 0 ? Math.round((answeredCount / totalQuestions) * 100) : 0;
            const progressBar = document.getElementById('progressBar');
            
            if (progressBar) {
                progressBar.style.width = percentage + '%';
                progressBar.textContent = percentage + '%';
            }
        }
        
        function updateSubmitButton() {
            const submitBtn = document.getElementById('submitBtn');
            const answeredQuestions = getAnsweredQuestions();
            const answeredCount = answeredQuestions.filter(answer => answer !== -1).length;
            
            if (submitBtn) {
                if (answeredCount > 0) {
                    submitBtn.disabled = false;
                } else {
                    submitBtn.disabled = true;
                }
            }
        }
        
        function createNavigationDots() {
            const navDots = document.getElementById('navDots');
            if (!navDots) return;
            
            navDots.innerHTML = '';
            
            for (let i = 0; i < totalQuestions; i++) {
                const dot = document.createElement('div');
                dot.className = 'nav-dot';
                dot.textContent = i + 1;
                dot.onclick = () => showQuestion(i);
                dot.title = `Go to Question ${i + 1}`;
                navDots.appendChild(dot);
            }
        }
        
        function updateNavigationDots() {
            const dots = document.querySelectorAll('.nav-dot');
            const answeredQuestions = getAnsweredQuestions();
            
            dots.forEach((dot, index) => {
                dot.classList.remove('current', 'answered');
                
                if (index === currentQuestion) {
                    dot.classList.add('current');
                } else if (answeredQuestions[index] !== -1) {
                    dot.classList.add('answered');
                }
            });
        }
        
        function updateOptionSelection(questionContainer) {
            const options = questionContainer.querySelectorAll('.option');
            const selectedRadio = questionContainer.querySelector('input[type="radio"]:checked');
            
            options.forEach(option => {
                option.classList.remove('selected');
            });
            
            if (selectedRadio) {
                selectedRadio.closest('.option').classList.add('selected');
            }
        }
        
        function getAnsweredQuestions() {
            const answered = [];
            for (let i = 0; i < totalQuestions; i++) {
                const radio = document.querySelector(`input[name="answers[${i}]"]:checked`);
                if (radio) {
                    answered[i] = parseInt(radio.value); // Store the selected option index at correct position
                } else {
                    answered[i] = -1; // Store -1 for unanswered questions
                }
            }
            console.log('Current quiz state (position-aware):', answered); // Debug output
            return answered;
        }
        
        function updateSummaryStats() {
            const answeredQuestions = getAnsweredQuestions();
            const answeredCount = answeredQuestions.filter(answer => answer !== -1).length;
            const totalQuestionsElement = document.getElementById('totalQuestions');
            const answeredCountElement = document.getElementById('answeredCount');
            const unansweredCountElement = document.getElementById('unansweredCount');
            const timeSpentDisplayElement = document.getElementById('timeSpentDisplay');
            
            if (totalQuestionsElement) totalQuestionsElement.textContent = totalQuestions;
            if (answeredCountElement) answeredCountElement.textContent = answeredCount;
            if (unansweredCountElement) unansweredCountElement.textContent = totalQuestions - answeredCount;
            if (timeSpentDisplayElement) timeSpentDisplayElement.textContent = document.getElementById('timeSpent').value;
        }
        
        function updateAnswersArray() {
            // Update the hidden field with the complete position-aware array
            const answeredQuestions = getAnsweredQuestions();
            const answersArrayField = document.getElementById('answersArray');
            if (answersArrayField) {
                answersArrayField.value = JSON.stringify(answeredQuestions);
                console.log('Updated hidden answersArray field:', answeredQuestions);
            }
        }
        
        // Timer functionality
        function startTimer() {
            timerInterval = setInterval(updateTimer, 1000);
        }
        
        function updateTimer() {
            const now = new Date();
            const elapsed = now - startTime;
            const hours = Math.floor(elapsed / 3600000);
            const minutes = Math.floor((elapsed % 3600000) / 60000);
            const seconds = Math.floor((elapsed % 60000) / 1000);
            
            let timeString;
            if (hours > 0) {
                timeString = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            } else {
                timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
            
            const timerElement = document.getElementById('timer');
            const timeSpentElement = document.getElementById('timeSpent');
            
            if (timerElement) timerElement.textContent = `Time: ${timeString}`;
            if (timeSpentElement) timeSpentElement.value = timeString;
        }
        
        // Custom modal functions
        function showConfirmModal(message, onConfirm, onCancel) {
            const modal = document.getElementById('confirmModal');
            const modalBody = document.getElementById('modalBody');
            const confirmBtn = document.getElementById('modalConfirm');
            const cancelBtn = document.getElementById('modalCancel');
            
            modalBody.textContent = message;
            modal.classList.add('active');
            
            // Remove any existing event listeners
            const newConfirmBtn = confirmBtn.cloneNode(true);
            const newCancelBtn = cancelBtn.cloneNode(true);
            confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
            cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);
            
            // Add new event listeners
            newConfirmBtn.addEventListener('click', () => {
                modal.classList.remove('active');
                if (onConfirm) onConfirm();
            });
            
            newCancelBtn.addEventListener('click', () => {
                modal.classList.remove('active');
                if (onCancel) onCancel();
            });
            
            // Close on backdrop click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('active');
                    if (onCancel) onCancel();
                }
            });
            
            // Close on Escape key
            const escapeHandler = (e) => {
                if (e.key === 'Escape') {
                    modal.classList.remove('active');
                    if (onCancel) onCancel();
                    document.removeEventListener('keydown', escapeHandler);
                }
            };
            document.addEventListener('keydown', escapeHandler);
        }
        
        // Form submission
        const quizForm = document.getElementById('quizForm');
        if (quizForm) {
            quizForm.addEventListener('submit', function(e) {
                clearInterval(timerInterval);
                
                // Update the hidden answers array field before submission
                updateAnswersArray();
                
                // Final validation
                const answeredQuestions = getAnsweredQuestions();
                const answeredCount = answeredQuestions.filter(answer => answer !== -1).length;
                console.log('Form submission - answered questions array:', answeredQuestions);
                console.log('Form submission - answered count:', answeredCount, 'out of', totalQuestions);
                
                if (answeredCount < totalQuestions) {
                    e.preventDefault();
                    const unansweredCount = totalQuestions - answeredCount;
                    const message = `You have ${unansweredCount} unanswered question${unansweredCount > 1 ? 's' : ''}. Are you sure you want to submit?`;
                    
                    showConfirmModal(message, 
                        () => {
                            // User confirmed, submit the form
                            clearInterval(timerInterval);
                            console.log('Quiz submitted with', answeredCount, 'out of', totalQuestions, 'answers');
                            console.log('Final answers array:', answeredQuestions);
                            quizForm.submit();
                        },
                        () => {
                            // User cancelled, restart timer
                            startTimer();
                        }
                    );
                } else {
                    // All questions answered, submit normally
                    console.log('Quiz submitted with all', answeredCount, 'questions answered');
                    console.log('Final answers array:', answeredQuestions);
                }
            });
        }
        
        // Keyboard navigation
        document.addEventListener('keydown', function(e) {
            if (totalQuestions === 0 || currentQuestion === -1) return; // Don't navigate if no questions or in summary
            
            if (e.key === 'ArrowLeft' && currentQuestion > 0) {
                e.preventDefault();
                previousQuestion();
            } else if (e.key === 'ArrowRight') {
                e.preventDefault();
                if (currentQuestion < totalQuestions - 1) {
                    nextQuestion();
                } else {
                    showSummary();
                }
            }
        });
        
        // Debug information
        console.log('Quiz initialized with', totalQuestions, 'questions');
        if (totalQuestions > 0) {
            console.log('Quiz data structure appears valid');
        } else {
            console.log('No quiz questions found');
        }
    </script>
    
</body>
</html>